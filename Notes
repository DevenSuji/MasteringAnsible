
***********************************************************************************************
VARIABLES
---------
If a variable is used at the start of an ITEM then it needs to be double quoted like,
name:
    - "{{ variable1 }}"
    - "{{ variable2 }}"

If a variable is used at the middle of an ITEM the it does not need to be double quoted like,
    - name: Start and Enable {{ firewall_service }}

MAGIC VARIABLES
---------------

- name:
  package:
    name: vsftpd
  when: inventory_hostname in groups["ftpservers"]

***********************************************************************************************
ENABLING ROOT SSH ON UBUNTU
---------------------------

sudo passwd root
sudo passwd -u root 
sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
***********************************************************************************************
LOOPS
-----

*** WITH_ITEMS


This is just an equivalent of foreach loop in PowerShell. See the example below

- name: Ensuring httpd and vsftpd are running
  service:
    name: "{{ item }}"
    state: started
  with_items:
    - httpd
    - vsftpd

The list of items can be provided using variable as well. See the example below

vars:
  web_services:
    - httpd
    - vsftpd

tasks:
  - name: start web services
    service:
      name: "{{ item }}"
      state: started
    with_items: "{{ web_services }}"

Items can be defined as a hash/dictionary, where each item has a multiple keys. Refer to the items using item.key1 and item.key2

- name: Manage users and group membership
  user:
    name: "{{ item.name }}"
    state: present
    groups: "{{ item.groups }}"
  with_items:
    - {name: 'linda', groups: 'students'}
    - {name: 'anna', groups: 'profs'}

Other LOOPS

*** with_file: A list of file names, item is set to the content of each file.

*** with_fileglob: Same as with_file, but allows globbing patterns in the file names.

*** with_sequence: Generates a sequence of items in increasing numerical order. Can work with start and end to define a range,
    using decimal, octal, or hexadecimal integer value.
    
*** with_random_choice: Takes a list, and item is set to one of the list items at random.

***********************************************************************************************
CONDITIONS
----------

1. Equal on strings ---> ansible_machine == "x84_64"
2. Equal on numeric ---> max_memory == 1024
3. Less than        ---> min_memory < 256
4. Greater than     ---> max_memory > 2048
5. Less than or equal to       ---> min_memory <= 256
6. Greater than or equal to       ---> max_memory >= 2048
7. Not equal to       ---> min_memory != 1024
8. Variable exists      ---> myvar is defined
9. Variable does not exist      ---> myvar is not defined
10. Variable is a boolean      ---> myvar
11. Variable is a boolean false       ---> not myvar

Example1

---
- hosts: all
  vars:
    to_install: samba

  tasks: 
    - name: Installing {{ to_install }}
      package:
        name: "{{ to_install }}"
      when: to_install is defined

Example2

---
- hosts: all
  vars:
    my_user: linda

  superusers:
    - root
    - linda

  tasks:
    - name: Run only if Linda is superusers
      user:
        name: "{{ my_user }}"
        groups: wheel
        append: yes
      when: my_user in superusers

Example of When Conditions

1. ansible_system_vendor == "VMware, Inc." and ansible_processor_cores == 1
2. ansible_distribution == "CentOS" or ansible_distribution == "Fedora"
3. (ansible_distribution == "CentOS" and ansible_processor_cores == 1) or (ansible_distribution == "Fedora" and ansible_system_vendor == "VMware, Inc.")

***********************************************************************************************

INVENTORY

1. Example of a machine in the inventory that needs to be connected on a different port.

	host1.example.com:50882

2. RANGE EXPANSION FUNCTIONALITY.
	
Large number of servers that share a common naming convention.
	host[1:3].example.com
	This is functionally equal to 
	host1.example.com
	host2.example.com
	host3.example.com

Range expansion also supports leading zeros ( [01:03] ) and alphabetic ranges
( [a:z] ). Unfortunately, only the range a:z is supported; that is, you can’t specify a range
such as [aa:dz] , as Ansible does not know how to cope with this. If you need to define a
range like this, you need to use two ranges :
host[a:d][a:z].example.com

If you’re familiar with Python’s slice syntax, this may look familiar to you. As with
slice, you can specify an optional third parameter step :

host[min:max:step].example.com

Step allows you to specify the increment between each host. There aren’t many use
cases for this, but the inventory file supports it nonetheless:

host[1:6:2].example.com

is equivalent to:

host1.example.com
host3.example.com
host5.example.com


EXAMPLE OF A COMPLEX INVENTORY FILE
-----------------------------------

[web_centos5]
worker1.sikkim.com ansible_user=devensuji ansible_ssh_private_key_file=devensuji.key
worker2.sikkim.com ansible_user=devensuji ansible_ssh_private_key_file=devensuji.key

[web_centos6]
worker[1:2].sikkim.com ansible_user=automation ansible_port=50022 ansible_ssh_private_key_file=/path/to/auto.key

[database_centos6]
db.example.com ansible_user=michael ansible_ssh_private_key_file=/path/to/db.key

[loadbalancer_centos6]
lb.example.com ansible_user=automation ansible_port=50022 ansible_ssh_private_key_file=/path/to/lb.key

[web_centos5]
fe1.example.com ansible_user=michael ansible_ssh_private_key_file=michael.key
fe2.example.com ansible_user=michael ansible_ssh_private_key_file=michael.key

[web_centos6]
web[1:3].example.com ansible_user=automation ansible_port=50022 ansible_ssh_private_key_file=/path/to/auto.key

[database_centos6]
db.example.com ansible_user=michael ansible_ssh_private_key_file=/path/to/db.key

[loadbalancer_centos6]
lb.example.com ansible_user=automation ansible_port=50022 ansible_ssh_private_key_file=/path/to/lb.key

[web:children]
web_centos5
web_centos6

[database:children]
database_centos6

[loadbalancer:children]
loadbalancer_centos6


DYNAMIC INVENTORY
-----------------
When you call Ansible, it will check to determine if the file passed in as the inventory file is executable. 
If it is, the file will be executed, and Ansible will switch to using its JSON parser to read the incoming data. 
If it’s not executable, it will be read by Ansible with the assumption that it’s in the INI file format, and it 
will fail to be parsed if it is a static JSON file.

***********************************************************************************************
ANSIBLE FACTS
--------------
ansible all -m setup -a "filter=ansible_distribution" >>> To capture a particular ansible fact. Here the fact is ansible_distribution
ansible all -m setup >>> To look into all the facts of each machine.

***********************************************************************************************

COMBINING LOOPS AND CONDITIONS

---
- name: Install vsftpd if sufficient space on /var/ftp
  package:
    name: vsftpd
    state: lastest
  with_items: "{{ ansible_mounts }}"
  when: item.mount == "/var/ftp" and item.size.available > 9000000000

  ***********************************************************************************************

  HANDLERS
  --------

  1. A handler is a task that is going to be executed if another task is successfull. 
  2. A handler is a conditional task that only runs after being notified  by another task.
  3. Handlers have a globally unique name and are triggered after all tasks in the playbook.
  4. Apart from that a handler is triggered by one or kore other tasks in the playbook; all of its properties are task properties.
  5. To trigger a handler, the playbook must have a notify: item, that calls the name of the handler.
  6. More than one handler can be called from a task.
  7. Handlers always run in the order in which the handlers section is written, not in the order of how the are called in the plays.
  8. Handlers run after all the other tasks in the playbook runs first. Once all the tasks are run, only then the handlers are run.
  9. Handler names must be globally unique, they are defines in the gloabl area like config variables.
  10. Handlers cannot be included.
  

